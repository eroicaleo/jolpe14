%%----------------------------------------------------------------------------------------------------
%% Load the thermal conductance matrix
%%----------------------------------------------------------------------------------------------------
M = load('hotspot_input/matrix_b.txt');

%%----------------------------------------------------------------------------------------------------
%% Specify the constants here
%%----------------------------------------------------------------------------------------------------
if ~exist('T_target', 'var')
  T_target = 273.15+80;
end
num_of_random_groups = 100;

%%----------------------------------------------------------------------------------------------------
%% Specify the task pattern here
%% 1. uniform 2. cool tri. 3. hot tri. 4. normal 5. inverse normal
%%----------------------------------------------------------------------------------------------------
if ~exist('task_pattern', 'var')
  task_pattern = 1;
end

%%----------------------------------------------------------------------------------------------------
%% Specify the number of the policies here
%% 1. matm 2. lower bound 3. lsap1 4. lsap2 5. random 6. base1
%%----------------------------------------------------------------------------------------------------
num_of_policies = 6;

%%----------------------------------------------------------------------------------------------------
% Store the mapping files here in string arrays
%%----------------------------------------------------------------------------------------------------

initial_mapping_files = char(  ...
'data/realuniform61.txt',      ...
'data/realcooltriangle61.txt', ...
'data/realhottriangle61.txt',  ...
'data/realnorm61.txt',         ...
'data/realinvnorm61.txt'       ...
);

matm_mapping_files = char(    ...
'data/debug_out_uniform.txt', ...
'data/debug_out_cool.txt',    ...
'data/debug_out_hot.txt',     ...
'data/debug_out_norm.txt',    ...
'data/debug_out_invnorm.txt'  ...
);

%%----------------------------------------------------------------------------------------------------
%% Load the task mapping file generated by cpp simulator.
%% The only thing matters here is the power on each core.
%% Temperature value does not matter.
%%----------------------------------------------------------------------------------------------------

A = load(strtrim(matm_mapping_files(task_pattern, :)));
initial_mapping = load(strtrim(initial_mapping_files(task_pattern, :)));

% A = load('data/corner_1hop_uniform.txt');
% A = load('data/corner_1hop_cooltriangle.txt');
% A = load('data/corner_1hop_hottriangle.txt');
% A = load('data/corner_1hop_norm.txt');
% A = load('data/corner_1hop_invnorm.txt');

% A = load('data/corner_init_uniform.txt');
% A = load('data/corner_init_cooltriangle.txt');
% A = load('data/corner_init_hottriangle.txt');
% A = load('data/corner_init_norm.txt');
% A = load('data/corner_init_invnorm.txt');

P = A(:, 1);
initial_mapping_P = initial_mapping(:, 1);

num_of_cores = size(P, 1);

%%----------------------------------------------------------------------------------------------------
%% Sanity check to see if matm_mapping is a permutation of initial_mapping
%%----------------------------------------------------------------------------------------------------
P1 = sort(initial_mapping_P);
P2 = sort(P);
diff = max(abs(P1 - P2));
if diff > 0.02
  print('matm_mapping is not a permutation of initial_mapping')
  exit
end

% Compute new matrix here
rconvection_ref = 0.05;
[G_part D] = ldt_matrix(M, rconvection_ref);

t_max = max(G_part*P + D);

[T_LSAP1 t_max_lsap1 p_lsap1] = lsap1_optimum(G_part, P, D);
[T_optimum t_max_optimum p_optimum] = lp_optimum(G_part, P, D);
[T_LSAP2 t_max_lsap2 p_lsap2] = lsap2_optimum(G_part, P, D, p_optimum);
[T_base1 t_max_base1 p_base1] = base1_policy(G_part, initial_mapping_P, D);

result = [t_max_optimum t_max_lsap1 t_max_lsap2 t_max t_max_base1] - 273.15;

save('matm_power.txt', 'P', '-ascii');

% Provide a group of permutation and we need to find the
% best from the random permutation

% Initialize the random seed so we get the same results every time
rng(20141228)
Random_Permutation = zeros(num_of_cores, num_of_random_groups);
for i = 1 : num_of_random_groups
    Random_Permutation(:, i) = randperm(num_of_cores);
end

% Now compute the system power based on new task allocation
[T_Total P_Dyn_Total T_Mean] = leakage(rconvection_ref, 'hotspot_input/DBAmapping.txt', Random_Permutation);

r_final = zeros(num_of_policies, 1);
p_chip  = zeros(num_of_policies, 1);
t_mean  = zeros(num_of_policies, 1);

for ix = 1:num_of_policies
    r_min = 0.005;
    r_max = 0.05;
    r_cur = (r_max+r_min)/2;
    while r_min <= r_max
        [T_Total P_Chip_Total T_Mean] = leakage(r_cur, 'hotspot_input/DBAmapping.txt', []);
        if (T_Total(ix, 1) < T_target)
            r_min = r_cur;
        elseif (T_Total(ix, 1) > T_target)
            r_max = r_cur;
        end
        if (abs(T_Total(ix, 1)-T_target) < 0.0001)
            break;
        end
        r_cur = (r_max+r_min)/2;
    end
    r_final(ix) = r_cur;
    p_chip(ix) = P_Chip_Total(ix);
    t_mean(ix) = T_Mean(ix);
end

Fan_a = 0.001;
Fan_power = Fan_a ./ (r_final.^3);

P_total = p_chip + Fan_power;

P_Dyn = repmat(sum(P), num_of_policies, 1);
P_Leak = p_chip - P_Dyn;
Power_Breakdown = [P_Dyn P_Leak Fan_power];
